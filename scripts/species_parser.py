import os

import argparse

def species_parser(required=True):
    parser=argparse.ArgumentParser(
        allow_abbrev=False,
        add_help=False
    )
    parser.add_argument(
        '--mouse_ref',
        help='Path to the .fa file for mouse reference to be used in alignment and organism assignment',
        type=str,
        required=required
    )
    parser.add_argument(
        '--human_ref',
        help='Path to the .fa file for human reference to be used in alignment and organism assignment',
        type=str,
        required=True
    )
    parser.add_argument(
        '--human_annotation',
        help='Path to the .gtf file matching the human reference build',
        type=str,
        required=True
    )
    parser.add_argument(
        '--mouse_annotation',
        help='Path to the .gtf file matching the mouse reference build',
        required=True,
        type=str
    )
    parser.add_argument(
        '--xengsort_hash',
        help='path to xengsort hash table file required for classification',
        required=False,
        default=None
    )
    parser.add_argument(
        '--xengsort_info',
        help='path to xengsort info file requred for classification'
    )
    parser.add_argument(
        '--human_index',
        help='path to star index under human  genome build',
        required=False,
        default=None
    )
    parser.add_argument(
        '--mouse_index',
        help='path to star index under mouse genome build',
        required=False,
        default=None
    )
    args = parser.parse_args()
    return args

def check_index(star_index):
    star_version = os.popen("STAR --version").read().strip()

    with open(os.path.join(star_index, "Log.out"), "r") as f:
        first_line = f.readline().strip()
        index_version = first_line.split("=")[-1].split("_")[-1]

        if index_version != star_version:
            raise Exception(
                f"STAR index version ({index_version}) is"
                + f" incompatible with your STAR version ({star_version})"
            )

args = species_parser()

human_dir='species/human'
mouse_dir='species/mouse'

if os.path.isdir('species'):
    raise Exception('Species Directory Already Exists')
if not os.path.isdir('species'):
    os.system('mkdir -p %s' % human_dir)
    os.system('mkdir -p %s' % mouse_dir)

#symlink reference data annotations to new directory
if args.mouse_ref.endswith(('fa','fasta','fa.gz','fasta.gz')) == False:
    raise Exception('mouse assembly must be a fasta genome reference file')

if args.human_ref.endswith(('fa','fasta','fa.gz','fasta.gz')) == False:
    raise Exception('human assembly must be a fasta genome reference file')

if args.mouse_annotation.endswith('gtf') == False:
    raise Exception('mouse annotation must be a genome annotation file in gtf format')

if args.human_annotation.endswith('gtf') == False:
    raise Exception('human annotation must be a genome annotation file in gtf format')


os.symlink(args.mouse_ref,'species/mouse/genome.fa')
os.symlink(args.mouse_annotation,'species/mouse/annotation.gtf')

os.symlink(args.human_ref,'species/human/genome.fa')
os.symlink(args.human_annotation,'species/human/annotation.gtf')

if args.xengsort_index != None:
    if args.xengsort_hash.endswith('hash') == False:
        raise Exception('File must be hash table generated by xengsort index')
    os.symlink(args.xengsort_hash,'species/idx.hash')
    if args.xengsort_info.endswith('info') == False:
        raise Exception('File must be info file generated by xengsort index')
    os.symlink(args.xengsort_info,'species/idx.info')



if args.human_index != None:
    check_index(args.human_index)
    os.symlink(args.human_index,'species/human/star_index')

if args.mouse_index != None:
    check_index(args.mouse_index)
    os.symlink(args.mouse_index,'species/mouse/star_index')

print('species directory successfully completed, keep project execution in the current directory')
